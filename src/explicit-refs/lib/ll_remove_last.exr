
(* Example 1 *)

let l1 = { head <= 0; length <= 0} (* 0 in head signals null *)
in let add_front = proc (x) { proc (l) {
   	      begin
	         l.head <={ data <=x; next <= l.head };
		 l.length <= l.length+1
              end
	      }}
in letrec remove_last_helper(prev)  =  proc (curr) {
        if number?(curr.next) then

        prev.next <= 0

        else
        ((remove_last_helper curr) curr.next)
}
in let remove_last = proc (l) {
       (* assume that the list is not empty but I can have 1 node*)
       if l.length = 1 then
       begin
       l.head <= 0;
       l.length <= l.length - 1
       end
       else
       begin
       ((remove_last_helper l.head) l.head.next);
       l.length = l.length - 1
        end
}

in begin
     ((add_front 2) l1);
     ((add_front 3) l1);
     ((add_front 4) l1);
     (remove_last l1);
     debug(l1)  (* required inspect the list *)
   end